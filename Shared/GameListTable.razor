
<div class="row mb-3">
    <div class="col">
        <select class="btn btn-toolbar border dropdown-toggle" @onchange="ChangeTableStyle">
            <option selected value="">Choose Table Style</option>
            @foreach(TableListModel item in AppStyle.TableStyle)
            {
                <option value="@item.Value">@item.Text</option>
            }
        </select>
    </div>
</div>

<div class="table-responsive">
    <table class="table @_currentTableStyle">
        <thead class="thead-light">
            <tr>
                <th>Name</th>
                <th>Genre</th>
                <th>Release Date</th>
                <th><input type="checkbox" @bind="_displayButtons"/></th>
            </tr>
        </thead>
        <tbody>
            <GenericList ListOfItems="Games">
                <ItemTemplate Context="game">
                    <IndividualGame Game="game" IsTable="true" DisplayButtons="_displayButtons" DeleteGame="DeleteTheGame" />
                </ItemTemplate>
            </GenericList>
            <Confirmation @ref="_confirmation" onCancel="OnCancel" onConfirm="OnConfirm">
                <div class="text-danger">Do you wish to delete @_gameToBeDeleted.Name</div>
            </Confirmation>
        </tbody>
    </table>
</div>

@code {
    [Parameter] public List<Game> Games { get; set; }

    [CascadingParameter]
    public AppStyle AppStyle { get; set; }

    private bool _displayButtons = false;
    private Confirmation _confirmation;
    private Game _gameToBeDeleted;

    private string _currentTableStyle = "table-striped";

    void DeleteTheGame(Game game)
    {
        _gameToBeDeleted = game;
        _confirmation.Show();
    }

    /*-------------------------------------------------------------*/
    protected override void OnInitialized()
    {
        Console.WriteLine($"1. OnInitialized(). Games count: {Games?.Count}.");
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine($"2. OnParametersSet(). Games count: {Games?.Count}.");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine($"3. OnAfterRender(bool firstRender). First render: {firstRender}");
    }

    protected override bool ShouldRender()
    {
        return true;
    }

    // public void DoSomeThing()
    // {
    //     // Some crazy logic...
    // 
    private void OnConfirm()
    {
        Games.Remove(_gameToBeDeleted);
        _confirmation.Hide();
        _gameToBeDeleted = null;
    }

    private void OnCancel()
    {
        _confirmation.Hide();
        _gameToBeDeleted = null;
    }

    private void ChangeTableStyle(ChangeEventArgs currentItem)
    {
        _currentTableStyle = currentItem.Value?.ToString() ?? "";
    }
}
